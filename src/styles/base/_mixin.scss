@charset "UTF-8";
@use "sass:math";

/* mediaQuery */
$breakpoints: (
        mobile: 768px,
        tablet: 1025px,
        laptop: 1536px,
        sm: 360px,
);

@mixin media($from: false, $until: false, $and: false, $or: false, $etc: false, $media-type: all) {
    /// ‚ùì ÏÑ†ÌÉùÍ∞í
    /// $from, $until : $breakpoints or number
    /// $and : Ï°∞Í±¥ Ïó∞ÏÇ∞Ïûê
    /// Ïòà) @include media($from: "sm", $until: 768px, $and:"orientation: landscape")
    /// media(false, tablet, $etc:", (max-width: 1366px) and (pointer: coarse)")
    ///
    $min-width: 0;
    $max-width: 0;
    $query: "";

    @if $from {
        @if type-of($from) == number {
            $min-width: $from;
        } @else {
            $min-width: map-get($breakpoints, $from);
        }
    }
    @if $until {
        @if type-of($until) == number {
            $max-width: $until - 1px;
        } @else {
            $max-width: map-get($breakpoints, $until) - 1px;
        }
    }

    @if $min-width != 0 {
        $query: "#{$query} and (min-width: #{$min-width})";
    }
    @if $max-width != 0 {
        $query: "#{$query} and (max-width: #{$max-width})";
    }
    @if $and {
        $query: "#{$query} and (#{$and})";
    }
    @if $or {
        $query: "#{$query} or (#{$or})";
    }
    @if $etc {
        $query: "#{$query} #{$etc}";
    }

    @if ($media-type == "all" and $query != "") {
        $media-type: "";
        $query: str-slice(unquote($query), 6);
    }

    @media #{$media-type + $query} {
        @content;
    }
}

/* Font Size */
@mixin fontSize($font-size: null, $line-height: null, $letter-spacing: null) {
    /// ‚ùì ÏÑ†ÌÉùÍ∞í
    /// $font-size, $letter-spacing, $line-height : photoshop value
    /// $margin-bottom : marginBlock * value
    //font-size: $font-size * 1px;
    @if $font-size == null {
        font-size: 1rem;
    } @else {
        font-size: to_vw($font-size);
    }

    @if $line-height == null {
        line-height: 1;
    } @else {
        line-height: calc($line-height / $font-size);
    }

    @if $letter-spacing == null {
        letter-spacing: #{calc(-0.02)}em; // -2%;
    } @else {
        letter-spacing: #{calc($letter-spacing / 1000)}em;
    }
}

/* Ellipsis */
@mixin ellipsis($lines: false, $font-size: null, $lh: null, $use: true) {
    /// @ Í∞íÏù¥ ÏóÜÏùÑ Í≤ΩÏö∞
    /// Í∏∞Î≥∏Ï†ÅÏúºÎ°ú 1Ï§Ñ ÎßêÏ§ÑÏûÑ

    /// @ Í∞íÏù¥ 2Ïù¥ÏÉÅ Ïùº Í≤ΩÏö∞
    /// $font-size : em Í≥ÑÏÇ∞ÏúºÎ°ú Ìï¥Îãπ font-size ÌïÑÏöî
    /// $lh : line-height;
    /// Ìï¥ÎãπÌïòÎäî Í∞íÎßå ÌÅº ÎßêÏ§ÑÏûÑ => @include ellipsis(3); üëà 3Ï§Ñ ÎßêÏ§ÑÏûÑ

    @if ($lines) {
        // Ïó¨Îü¨ Ï§Ñ ÎßêÏ§ÑÏûÑ
        $em: $lh / $font-size;

        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: $lines;
        -webkit-box-orient: vertical;
        text-overflow: ellipsis;
        word-wrap: normal;
        line-height: $em;
        max-height: ($em * $lines) * 1em;
    } @else {
        // Ìïú Ï§Ñ ÎßêÏ§ÑÏûÑ
        overflow: hidden;
        display: block;
        text-overflow: ellipsis;
        white-space: nowrap;
        word-wrap: normal;
    }
}

/* PX TO VW (to vw) */
@function to_vw($px-size) {
    $minus: 0;
    $size: 0;
    $resultVw: 0;
    $a: a;

    @if $px-size < 0 {
        //ÏùåÏàò
        $px-size: $px-size * -1;
        $minus: 1;
    }

    // @if $minus > 0 {
    //     $size: unquote("calc(calc(#{$px-size}px * var(--base-ratio)) * -1)");
    //     $resultVw: unquote("calc(calc(calc(#{$px-size} / var(--base-size)) * var(--base-percent)) * -1)");
    // } @else {
    //     $size: unquote("calc(#{$px-size}px * var(--base-ratio))");
    //     $resultVw: unquote("calc(calc(#{$px-size} / var(--base-size)) * var(--base-percent))");
    // }

    // @return m#{$a}x(#{$size}, #{$resultVw});

    @if $minus > 0 {
        $size: unquote("calc(calc(#{$px-size}px * var(--base-ratio)) * -1)");
        $resultVw: unquote("calc(calc(calc(#{$px-size} / var(--base-size)) * var(--base-percent)) * -1)");
        @return m#{$a}x(#{$resultVw});
    } @else {
        $size: unquote("calc(#{$px-size}px * var(--base-ratio))");
        $resultVw: unquote("calc(calc(#{$px-size} / var(--base-size)) * var(--base-percent))");
        @return m#{$a}x(#{$size}, #{$resultVw});
    }
}

/* Flex */
@mixin flex($mode: flex, $justify-content: start, $align-items: normal, $wrap: wrap) {
    display: $mode;
    flex-wrap: $wrap;
    justify-content: $justify-content;
    align-items: $align-items;
}

/* wordBreak */
@mixin wordBreak {
    word-break: keep-all;
    word-wrap: break-word;
}