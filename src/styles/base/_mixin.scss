@charset "UTF-8";
@use "sass:math";
@use "sass:string";
@use "sass:map";
@use "sass:meta";

// ========================================
// Media Query
// ========================================
$breakpoints: (
        mobile: 768px,
        tablet: 1025px,
        laptop: 1536px,
        sm: 360px,
);

@mixin media($from: false, $until: false, $and: false, $or: false, $etc: false, $media-type: all) {
  // 선택값
  // $from, $until: $breakpoints or number
  // $and: 조건 연산자
  // 예) @include media($from: "sm", $until: 768px, $and: "orientation: landscape")
  // media(false, tablet, $etc: ", (max-width: 1366px) and (pointer: coarse)")

  $min-width: 0;
  $max-width: 0;
  $query: "";

  @if $from {
    @if meta.type-of($from) == number {
      $min-width: $from;
    } @else {
      $min-width: map.get($breakpoints, $from);
    }
  }
  @if $until {
    @if meta.type-of($until) == number {
      $max-width: $until - 1px;
    } @else {
      $max-width: map.get($breakpoints, $until) - 1px;
    }
  }

  @if $min-width != 0 {
    $query: "#{$query} and (min-width: #{$min-width})";
  }
  @if $max-width != 0 {
    $query: "#{$query} and (max-width: #{$max-width})";
  }
  @if $and {
    $query: "#{$query} and (#{$and})";
  }
  @if $or {
    $query: "#{$query} or (#{$or})";
  }
  @if $etc {
    $query: "#{$query} #{$etc}";
  }

  @if ($media-type == "all" and $query != "") {
    $media-type: "";
    $query: string.slice(string.unquote($query), 6);
  }

  @media #{$media-type + $query} {
    @content;
  }
}

// ========================================
// Font Size
// ========================================
@mixin fontSize($font-size: null, $line-height: null, $letter-spacing: null) {
  // 선택값
  // $font-size, $letter-spacing, $line-height: photoshop value
  // font-size: $font-size * 1px;

  @if $font-size == null {
    font-size: 1rem;
  } @else {
    font-size: to_vw($font-size);
  }

  @if $line-height == null {
    line-height: 1.2;
  } @else {
    line-height: math.div($line-height, $font-size);
  }

  @if $letter-spacing == null {
    letter-spacing: -0.02em; // -2%
  } @else {
    letter-spacing: math.div($letter-spacing, 1000) * 1em;
  }
}

// ========================================
// Ellipsis
// ========================================
@mixin ellipsis($lines: false, $font-size: null, $lh: null, $use: true) {
  // 값이 없을 경우: 기본적으로 1줄 말줄임
  // 값이 2이상일 경우:
  // $font-size: em 계산으로 해당 font-size 필요
  // $lh: line-height
  // 해당하는 값만큼 말줄임 => @include ellipsis(3); // 3줄 말줄임

  @if ($lines) {
    // 여러 줄 말줄임
    $em: math.div($lh, $font-size);

    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    text-overflow: ellipsis;
    word-wrap: normal;
    line-height: $em;
    max-height: ($em * $lines) * 1em;
  } @else {
    // 한 줄 말줄임
    overflow: hidden;
    display: block;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: normal;
  }
}

// ========================================
// PX TO VW (to vw)
// ========================================
@function to_vw($px-size) {
  $minus: 0;
  $size: 0;
  $resultVw: 0;

  @if $px-size < 0 {
    // 음수
    $px-size: $px-size * -1;
    $minus: 1;
  }

  @if $minus > 0 {
    $size: string.unquote("calc(calc(#{$px-size}px * var(--base-ratio)) * -1)");
    $resultVw: string.unquote("calc(calc(calc(#{$px-size} / var(--base-size)) * var(--base-percent)) * -1)");
    @return max(#{$resultVw});
  } @else {
    $size: string.unquote("calc(#{$px-size}px * var(--base-ratio))");
    $resultVw: string.unquote("calc(calc(#{$px-size} / var(--base-size)) * var(--base-percent))");
    @return max(#{$size}, #{$resultVw});
  }
}

// ========================================
// Flex
// ========================================
@mixin flex($mode: flex, $justify-content: start, $align-items: normal, $wrap: wrap) {
  display: $mode;
  flex-wrap: $wrap;
  justify-content: $justify-content;
  align-items: $align-items;
}

// ========================================
// Word Break
// ========================================
@mixin wordBreak {
  word-break: keep-all;
  word-wrap: break-word;
}

// ========================================
// View Component Mixins (Feed detail page)
// ========================================
@mixin view-responsive-font($desktop, $mobile: null) {
  font-size: $desktop;

  @if $mobile {
    @include media($until: mobile) {
      font-size: $mobile;
    }
  }
}

@mixin view-responsive-spacing($desktop, $mobile: null) {
  margin-bottom: $desktop;

  @if $mobile {
    @include media($until: mobile) {
      margin-bottom: $mobile;
    }
  }
}

@mixin view-responsive-margin($desktop, $mobile: null) {
  margin-top: $desktop;

  @if $mobile {
    @include media($until: mobile) {
      margin-top: $mobile;
    }
  }
}